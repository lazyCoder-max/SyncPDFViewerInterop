@page "/"
@using MudBlazor
@using SyncPDFViewerInterop.Components
@using SyncPDFViewerInterop.Interfaces
@rendermode InteractiveServer
<PageTitle>Home</PageTitle>

<h1>Hello, world!</h1>

Welcome to your new app.
<MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="HandleClick">
    Load
</MudButton>
<MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="HandleSignatureFieldClick">
    Add Signature Field
</MudButton>
<MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="HandleInitialFieldClick">
    Add Initial Box Field
</MudButton>
<MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="HandleTextBoxFieldClick">
    Add Text Box Field
</MudButton>
<MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="HandleCheckBoxFieldClick">
    Add CheckBox Field
</MudButton>
<MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="HandleAddRadioBoxFieldClick">
    Add RadioBox Field
</MudButton>
<MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="HandleAddDropdownFieldClick">
    Add Dropdown Field
</MudButton>
<MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="HandleAddListBoxFieldClick">
    Add Listbox Field
</MudButton>
<MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="HandleUpdateFieldClick">
    Update Field
</MudButton>
<MudCheckBox T="bool" Value="checkBoxValue" Label="@DisplayNme" ValueChanged="HandleCheckBoxChanged" />
<PDFViewer >

</PDFViewer>

@code
{
    private bool checkBoxValue = false;
    private string DisplayNme = "Edit Mode Disabled";
    [Inject] private IPDFViewerInterop pdfViewer { get; set; }
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await base.OnAfterRenderAsync(firstRender);
        if(firstRender)
        {
            await pdfViewer.Configure();
        }
    }
    protected async Task HandleClick()
    {

        //await pdfViewer.LoadPDF("https://cdn.syncfusion.com/content/pdf/pdf-succinctly.pdf");
        string url = "https://cdn.syncfusion.com/content/pdf/pdf-succinctly.pdf";
        var pdfStream = await ConvertUrlToMemoryStreamAsync(url);
        await pdfViewer.LoadPDF(pdfStream, "application/vnd.openxmlformats-officedocument.wordprocessingml.document");
        StateHasChanged();
    }
    private async Task<byte[]> ConvertUrlToMemoryStreamAsync(string url)
    {
        using (HttpClient client = new HttpClient())
        {
            // Download the PDF file as a byte array
            byte[] fileBytes = await client.GetByteArrayAsync(url);


            return fileBytes;
        }
    }
    protected async Task HandleSignatureFieldClick()
    {
        await pdfViewer.AddSignatureField();
        StateHasChanged();
    }
    protected async Task HandleInitialFieldClick()
    {
        await pdfViewer.AddInitialField();
        StateHasChanged();
    }
    private async Task HandleCheckBoxChanged(bool e)
    {
        await pdfViewer.SetFormFieldMode(e);
        if (e)
        {
            DisplayNme = "Edit Mode Enabled";
        }
        else
        {
            DisplayNme = "Edit Mode Disabled";
        }
        StateHasChanged();
    }
    protected async Task HandleTextBoxFieldClick()
    {
        await pdfViewer.AddTextBoxField();
        StateHasChanged();
    }
    protected async Task HandleUpdateFieldClick()
    {
        StateHasChanged();
    }
    protected async Task HandleCheckBoxFieldClick()
    {
        await pdfViewer.AddCheckBoxField();
        StateHasChanged();
    }
    protected async Task HandleAddRadioBoxFieldClick()
    {
        await pdfViewer.AddRadioBoxField();
        StateHasChanged();
    }
    protected async Task HandleAddListBoxFieldClick()
    {
        await pdfViewer.AddListBoxField();
        StateHasChanged();
    }
    protected async Task HandleAddDropdownFieldClick()
    {
        await pdfViewer.AddDropdownField();
        StateHasChanged();
    }
}